/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-04-23 10:56:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.simul;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class simul_005fhome_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1700193303370L));
    _jspx_dependants.put("jar:file:/C:/Dev/workspaces/project11/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/project11/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\" integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n");
      out.write("<title>시뮬레이션 페이지</title>\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write(".flex{\r\n");
      out.write("    display:flex;\r\n");
      out.write("}\r\n");
      out.write("* {\r\n");
      out.write("    cursor: default;\r\n");
      out.write("}\r\n");
      out.write("a {\r\n");
      out.write("    color: inherit; /* 링크의 색을 부모 요소에서 상속 */\r\n");
      out.write("    text-decoration: none; /* 링크의 밑줄 제거 */\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("#background{\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    background-size: cover; /* 이미지가 요소에 맞게 확장되도록 설정합니다. */\r\n");
      out.write("    background-position: center; /* 이미지를 가운데 정렬합니다. */\r\n");
      out.write("    background-repeat: no-repeat; /* 이미지 반복을 비활성화합니다. */\r\n");
      out.write("    transition: background-image 1s ease-in-out;\r\n");
      out.write("}\r\n");
      out.write("#background.background1 {\r\n");
      out.write("    background-image: url('/packs/resources/img/main/back1.jpg');\r\n");
      out.write("}\r\n");
      out.write("#background.background2 {\r\n");
      out.write("    background-image: url('/packs/resources/img/main/back2.jpg');\r\n");
      out.write("}\r\n");
      out.write("#background.background3 {\r\n");
      out.write("    background-image: url('/packs/resources/img/main/back3.jpg');\r\n");
      out.write("}\r\n");
      out.write("#background.background4 {\r\n");
      out.write("    background-image: url('/packs/resources/img/main/back4.jpg');\r\n");
      out.write("}\r\n");
      out.write("#background.background5 {\r\n");
      out.write("    background-image: url('/packs/resources/img/main/back5.jpg');\r\n");
      out.write("}\r\n");
      out.write("#background.background6 {\r\n");
      out.write("    background-image: url('/packs/resources/img/main/back6.jpg');\r\n");
      out.write("}\r\n");
      out.write("#ui{\r\n");
      out.write("    max-width: 1000px;\r\n");
      out.write("    margin-left: auto; /* 요소를 가운데 정렬하기 위해 왼쪽 마진을 자동으로 설정합니다. */\r\n");
      out.write("    margin-right: auto;\r\n");
      out.write("    padding: 0 50px;\r\n");
      out.write("    background-color: rgba(255, 255, 255, 0.5);\r\n");
      out.write("}\r\n");
      out.write("#tale{\r\n");
      out.write("    height: 170px;\r\n");
      out.write("}\r\n");
      out.write("#simulMainBanner{\r\n");
      out.write("    justify-content: flex-start;\r\n");
      out.write("    height: 170px;\r\n");
      out.write("}\r\n");
      out.write("#menuBar{\r\n");
      out.write("    padding:10px;\r\n");
      out.write("    width: 145px;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    text-overflow: ellipsis;\r\n");
      out.write("}\r\n");
      out.write("#menuBar > div{\r\n");
      out.write("    margin-bottom: 8px;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("}\r\n");
      out.write("#start{\r\n");
      out.write("    width: 145px;\r\n");
      out.write("    height: 30px;\r\n");
      out.write("    border-radius: 10px;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    line-height: 30px;\r\n");
      out.write("    color: #fff;\r\n");
      out.write("    background: #555;\r\n");
      out.write("    transition: background-color 0.3s;\r\n");
      out.write("}\r\n");
      out.write("#start > a{\r\n");
      out.write("    display: inline-block; /* 링크를 인라인 블록 요소로 변경하여 너비와 높이를 설정할 수 있도록 함 */\r\n");
      out.write("    width: 100%; /* 부모 요소의 너비를 전체로 확장 */\r\n");
      out.write("    height: 100%; /* 부모 요소의 높이를 전체로 확장 */\r\n");
      out.write("    text-decoration: none; /* 링크 텍스트의 밑줄 제거 */\r\n");
      out.write("    color: #fff;\r\n");
      out.write("}\r\n");
      out.write("#start:hover{\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    background-color: #888;\r\n");
      out.write("    color: #fff;\r\n");
      out.write("}\r\n");
      out.write("#start.on:hover{\r\n");
      out.write("    background: #ff0000;\r\n");
      out.write("}\r\n");
      out.write("#pickChamps{\r\n");
      out.write("    height: 155px;\r\n");
      out.write("}\r\n");
      out.write("#champList {\r\n");
      out.write("    height:600px;\r\n");
      out.write("    overflow: auto;\r\n");
      out.write("}\r\n");
      out.write("#champListBox {\r\n");
      out.write("    flex-wrap: wrap;\r\n");
      out.write("    justify-content: flex-start;\r\n");
      out.write("    padding: 3px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".champ {\r\n");
      out.write("    margin: 7px; /* 플렉스 아이템 간격 조절 */\r\n");
      out.write("    width: 150px; /* 가로 크기 고정 */\r\n");
      out.write("    height: 150px; /* 세로 크기 고정 */\r\n");
      out.write("    background: #555;\r\n");
      out.write("    transition: background-color 0.3s; /* 변화를 0.3초 동안 부드럽게 만듦 */\r\n");
      out.write("}\r\n");
      out.write(".champ:hover{\r\n");
      out.write("    background-color: #888; /* 호버 시 배경색 변화 */\r\n");
      out.write("}\r\n");
      out.write(".champ:hover, /* 부모 요소 호버 효과 */\r\n");
      out.write(".champ:hover > * { /* 자식 요소 호버 효과 */\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* champ 클래스 내부의 이미지 스타일 */\r\n");
      out.write(".champ img {\r\n");
      out.write("    max-width: 100%; /* 가로 크기 100%로 설정하여 부모 요소에 맞춤 */\r\n");
      out.write("    height: auto; /* 세로 크기는 자동 조정 */\r\n");
      out.write("}\r\n");
      out.write(".tagName img {\r\n");
      out.write("    height: 20px; /* 세로 크기는 자동 조정 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* champ 클래스 내부의 name 클래스의 스타일 */\r\n");
      out.write(".champ .name {\r\n");
      out.write("    padding: 2px; /* 패딩 설정 */\r\n");
      out.write("    overflow: hidden; /* 글자가 div 밖으로 벗어날 경우 숨김 */\r\n");
      out.write("    white-space: nowrap; /* 글자가 div 안에서 줄바꿈되지 않도록 설정 */\r\n");
      out.write("    text-overflow: ellipsis; /* 글자가 div를 벗어날 경우 ...으로 표시 */\r\n");
      out.write("    color: #fff;\r\n");
      out.write("    font-size: 20px;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write(".cid {\r\n");
      out.write("    display: none;\r\n");
      out.write("}\r\n");
      out.write(".champ.on{\r\n");
      out.write("    background: #ff0000;\r\n");
      out.write("}\r\n");
      out.write(".tagName {\r\n");
      out.write("    padding: 3px;\r\n");
      out.write("}\r\n");
      out.write("/* 스크롤바의 전체 스타일 */\r\n");
      out.write("::-webkit-scrollbar {\r\n");
      out.write("    width: 8px; /* 스크롤바의 너비 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 스크롤바의 추적(트랙) 스타일 */\r\n");
      out.write("::-webkit-scrollbar-track {\r\n");
      out.write("    background-color: rgba(255, 255, 255, 0.5); /* 추적(트랙)의 배경색 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 스크롤바의 슬라이더(쓰롯) 스타일 */\r\n");
      out.write("::-webkit-scrollbar-thumb {\r\n");
      out.write("    background-color: #888; /* 슬라이더(쓰롯)의 배경색 */\r\n");
      out.write("    border-radius: 3px; /* 슬라이더(쓰롯)의 둥근 모서리 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 마우스 오버시 스크롤바의 슬라이더(쓰롯) 스타일 */\r\n");
      out.write("::-webkit-scrollbar-thumb:hover {\r\n");
      out.write("    background-color: #555; /* 마우스 오버시 슬라이더(쓰롯)의 배경색 */\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<article id=\"background\" class=\"background1\">\r\n");
      out.write("<div id=\"ui\">\r\n");
      out.write("    <div id=\"simulMainBanner\" class=\"flex\">\r\n");
      out.write("        <div id=\"menuBar\">\r\n");
      out.write("            <div class=\"flex\"><div>VERSION</div><div>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${version}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</div></div>\r\n");
      out.write("            <div class=\"flex\"><div>PLAYER</div><div>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</div></div>\r\n");
      out.write("            <div>PICK 5 CHAMP</div>\r\n");
      out.write("            <div id=\"start\" class=\"ready\">시작하기</div>\r\n");
      out.write("            <div><a href=\"/packs\">메뉴로</a></div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div id=\"pickChamps\" class=\"flex\">\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"champList\">\r\n");
      out.write("    <div id=\"champListBox\" class=\"flex\">\r\n");
      out.write("        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"tale\">\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("</article>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("        var jQ = jQuery.noConflict();\r\n");
      out.write("        \r\n");
      out.write("        var nowImg = 1;\r\n");
      out.write("        function changeBack(){\r\n");
      out.write("        	var backImg = Math.floor(Math.random() * 6) + 1;\r\n");
      out.write("        	if(backImg != nowImg){\r\n");
      out.write("            	setBack(backImg);\r\n");
      out.write("        	}else{\r\n");
      out.write("        		console.log(\"배경이미지 중복탐지\");\r\n");
      out.write("        		changeBack();\r\n");
      out.write("        	}\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function setBack(backImg){\r\n");
      out.write("        	nowImg = backImg;\r\n");
      out.write("        	jQ(\"#background\").removeClass();\r\n");
      out.write("        	jQ(\"#background\").addClass(\"background\" + backImg);\r\n");
      out.write("        }\r\n");
      out.write("        setInterval(changeBack, 5000);\r\n");
      out.write("        \r\n");
      out.write("        var id = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\r\n");
      out.write("        console.log(id)\r\n");
      out.write("        \r\n");
      out.write("        var selectCount = 0;\r\n");
      out.write("        \r\n");
      out.write("        jQ('#champListBox > .champ').click(function(){\r\n");
      out.write("        	if(jQ(this).hasClass('on')){\r\n");
      out.write("        		jQ(this).removeClass('on');\r\n");
      out.write("        		selectCount --;\r\n");
      out.write("        	}else{\r\n");
      out.write("        		if(selectCount<5){\r\n");
      out.write("        			jQ(this).addClass('on');\r\n");
      out.write("        			selectCount ++;\r\n");
      out.write("        		}\r\n");
      out.write("        	}\r\n");
      out.write("        	selectChampSetting();\r\n");
      out.write("        })\r\n");
      out.write("        \r\n");
      out.write("        function selectChampSetting(){\r\n");
      out.write("        	// on 클래스를 가지고 있는 .champ 요소들을 선택\r\n");
      out.write("            var selectedChamps = jQ('.champ.on');\r\n");
      out.write("\r\n");
      out.write("            // 기존에 있던 #pickChamps의 자식들을 제거\r\n");
      out.write("            jQ('#pickChamps').empty();\r\n");
      out.write("\r\n");
      out.write("            // 각 선택된 .champ 요소를 복제하여 새로운 .champ를 생성하고, #pickChamps의 자식으로 추가\r\n");
      out.write("            selectedChamps.each(function () {\r\n");
      out.write("                var clonedChamp = jQ(this).clone();\r\n");
      out.write("                var keyWord = jQ(this).find('.name').text().replaceAll(' ', '');\r\n");
      out.write("                console.log(keyWord);\r\n");
      out.write("                clonedChamp.removeClass('on'); // 'on' 클래스 제거\r\n");
      out.write("                clonedChamp.on('click', function () {\r\n");
      out.write("                    removeChampList(keyWord);\r\n");
      out.write("                    jQ(this).remove(); // 클릭된 div를 제거\r\n");
      out.write("                });\r\n");
      out.write("                jQ('#pickChamps').append(clonedChamp);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function removeChampList(keyWord){\r\n");
      out.write("        	console.log(keyWord);\r\n");
      out.write("        	var target = document.querySelectorAll('#champListBox .champ.' + keyWord + '.on');\r\n");
      out.write("            if(target.length > 0){ // 선택된 요소가 있는지 확인\r\n");
      out.write("                target.forEach(function(element) {\r\n");
      out.write("                	console.log(\"removeChampList\");\r\n");
      out.write("                    element.classList.remove('on');\r\n");
      out.write("                });\r\n");
      out.write("                selectCount--;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        function startAjax() {\r\n");
      out.write("            var selectedChampData = [];\r\n");
      out.write("\r\n");
      out.write("            jQ('.champ.on').each(function () {\r\n");
      out.write("                var champName = jQ(this).find('.name').text();\r\n");
      out.write("                var champId = jQ(this).find('.cid').text();\r\n");
      out.write("\r\n");
      out.write("                selectedChampData.push({\r\n");
      out.write("                    name: champName,\r\n");
      out.write("                    id: champId\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // Ajax 요청\r\n");
      out.write("            jQ.ajax({\r\n");
      out.write("                type: 'POST',\r\n");
      out.write("                url: '/packs/simul/simulStart.do',  // 실제 엔드포인트에 맞게 변경\r\n");
      out.write("                contentType: 'application/json',\r\n");
      out.write("                data: JSON.stringify({\r\n");
      out.write("                    version: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${version}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("',\r\n");
      out.write("                    selectedChamps: selectedChampData,\r\n");
      out.write("                    userID: id\r\n");
      out.write("                }),\r\n");
      out.write("                success: function (response) {\r\n");
      out.write("                    // 성공 시 동작\r\n");
      out.write("                    //console.log('Ajax request succeeded:', response);\r\n");
      out.write("                    console.log(response);\r\n");
      out.write("                    createResultBanner(response)\r\n");
      out.write("                    //simulResult(response, '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("                },\r\n");
      out.write("                error: function (error) {\r\n");
      out.write("                    // 실패 시 동작\r\n");
      out.write("                    console.error('Ajax request failed:', error);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function createResultBanner(tempId){\r\n");
      out.write("        	var resultLink = '<a href=\"/packs/simul/simulResult/'+tempId+'/'+id+'\">결과확인</a>'\r\n");
      out.write("        	jQ('#start').empty()\r\n");
      out.write("        	jQ('#start').addClass('on');\r\n");
      out.write("        	jQ('#start').append(resultLink)\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        /* window.addEventListener('beforeunload', function (event) {\r\n");
      out.write("            // Ajax 요청 보내기\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                type: 'POST',\r\n");
      out.write("                url: '/tempReset/'+");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(",  // 로그아웃을 처리하는 엔드포인트 URL\r\n");
      out.write("                async: false,   // 동기적으로 요청을 처리하려면 async 옵션을 false로 설정\r\n");
      out.write("                success: function (response) {\r\n");
      out.write("                    // 서버로부터 성공적인 응답을 받았을 때 수행할 작업\r\n");
      out.write("                    console.log('tempReset successful');\r\n");
      out.write("                },\r\n");
      out.write("                error: function (xhr, status, error) {\r\n");
      out.write("                    // 서버 요청이 실패했을 때 수행할 작업\r\n");
      out.write("                    console.error('tempReset failed:', error);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }); */\r\n");
      out.write("        \r\n");
      out.write("        /* function simulResult(tempID, userID){\r\n");
      out.write("        	jQ.ajax({\r\n");
      out.write("                type: 'POST',\r\n");
      out.write("                url: '/packs/simul/simulResult',  // 실제 엔드포인트에 맞게 변경\r\n");
      out.write("                contentType: 'application/json',\r\n");
      out.write("                data: JSON.stringify({\r\n");
      out.write("                	tempID: tempID,\r\n");
      out.write("                    userID: userID\r\n");
      out.write("                }),\r\n");
      out.write("                success: function (response) {\r\n");
      out.write("                    // 성공 시 동작\r\n");
      out.write("                    console.log('Ajax request succeeded:', response);\r\n");
      out.write("                    \r\n");
      out.write("                },\r\n");
      out.write("                error: function (error) {\r\n");
      out.write("                    // 실패 시 동작\r\n");
      out.write("                    console.error('Ajax request failed:', error);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        } */\r\n");
      out.write("        \r\n");
      out.write("        jQ(\"#start\").click(function(){\r\n");
      out.write("        	if(selectCount==5 && jQ(\"#start\").hasClass(\"ready\")){\r\n");
      out.write("        		startAjax();\r\n");
      out.write("        		jQ(\"#start\").removeClass(\"ready\");\r\n");
      out.write("        	}else if(selectCount<5 && jQ(\"#start\").hasClass(\"ready\")){\r\n");
      out.write("        		alert(\"5개를 골라주세요\");\r\n");
      out.write("        	}\r\n");
      out.write("        })\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/simul/simul_home.jsp(192,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("champion");
      // /WEB-INF/views/simul/simul_home.jsp(192,8) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/simul/simul_home.jsp(192,8) '${champList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${champList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("        <div class=\"champ ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${champion.champs_name.replaceAll(' ', '')}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("            <img src=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/resources/img/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${version}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/splash/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${champion.champs_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(".jpg\">\r\n");
            out.write("            <div class=\"name\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${champion.champs_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</div>\r\n");
            out.write("            <div class=\"cid\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${champion.champs_cid}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</div>\r\n");
            out.write("            <div class=\"tags flex\">\r\n");
            out.write("                ");
            if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\r\n");
            out.write("            </div>\r\n");
            out.write("        </div>\r\n");
            out.write("        ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/views/simul/simul_home.jsp(198,16) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("tags");
      // /WEB-INF/views/simul/simul_home.jsp(198,16) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/simul/simul_home.jsp(198,16) '${champion.champs_tags}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${champion.champs_tags}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("                <div class=\"tagName\">\r\n");
            out.write("                    <img src=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/resources/img/main/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${tags}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(".webp\">\r\n");
            out.write("                </div>\r\n");
            out.write("                ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
